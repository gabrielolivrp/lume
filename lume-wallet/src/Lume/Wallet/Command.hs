{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE ImportQualifiedPost #-}

module Lume.Wallet.Command where

import Control.Monad (forM_)
import Control.Monad.Except (MonadError (throwError))
import Data.Text qualified as T
import GHC.Natural (Natural)
import Lume.Core.Crypto.Address qualified as Addr
import Lume.Core.Transaction.Coin
import Lume.Wallet.Config (Config (cDataDir), parseConfig)
import Lume.Wallet.FileSystem (checkWalletExists)
import Lume.Wallet.Internal
import Lume.Wallet.Types

separator :: String
separator = "====================================================="

printSection :: String -> IO ()
printSection title = do
  putStrLn $ "\n" ++ title
  putStrLn separator

newWalletCommand :: FilePath -> WalletName -> IO ()
newWalletCommand configPath walletName = do
  config <- parseConfig configPath
  result <- newWallet config walletName
  case result of
    Left err -> putStrLn $ "‚ùå Failed to generate wallet: " ++ show err
    Right wallet -> do
      storedWalletResult <- withWallet config walletName (storeWallet wallet >> pure wallet)
      case storedWalletResult of
        Left err -> putStrLn $ "‚ùå Could not store wallet: " ++ show err
        Right storedWallet -> do
          putStrLn "\n‚úÖ Wallet created successfully!"
          putStrLn separator
          showWalletInfo storedWallet
          putStrLn separator

getWalletInfoCommand :: FilePath -> WalletName -> IO ()
getWalletInfoCommand configPath walletName = do
  config <- parseConfig configPath
  result <- withWallet config walletName loadWallet
  case result of
    Left err -> putStrLn $ "‚ùå Unable to load wallet: " ++ show err
    Right Nothing -> putStrLn "‚ö†Ô∏è Wallet not found."
    Right (Just wallet) -> do
      printSection "üìÑ Wallet Information"
      showWalletInfo wallet
      putStrLn separator

listAddressesCommand :: FilePath -> IO ()
listAddressesCommand configPath = do
  config <- parseConfig configPath
  result <- loadAllWallets config
  case result of
    Left errors -> do
      putStrLn "‚ùå Errors occurred while loading wallets:"
      forM_ errors $ \err -> putStrLn $ "  - " ++ show err
    Right wallets
      | null wallets -> putStrLn "‚ö†Ô∏è No wallets found."
      | otherwise -> do
          printSection "üóÇ Available Wallets"
          forM_ wallets $ \wallet -> do
            showWalletInfo wallet
            putStrLn separator

sendTransactionCommand :: FilePath -> WalletName -> String -> Natural -> IO ()
sendTransactionCommand configPath walletName to amount = do
  config <- parseConfig configPath
  exists <- checkWalletExists (cDataDir config) walletName
  if not exists
    then putStrLn $ "‚ùå Wallet '" ++ getWalletName walletName ++ "' does not exist."
    else do
      result <- withWallet config walletName $ do
        case Addr.mkAddress (T.pack to) of
          Left err -> throwError (WalletCryptoError $ show err)
          Right addr -> do
            let coin = Coin amount
            sendTransaction addr coin
      case result of
        Left err -> putStrLn $ "‚ùå Transaction failed: " ++ show err
        Right txid -> putStrLn $ "‚úÖ Transaction sent successfully! TXID: " ++ txid

scanFullUTXOCommand :: FilePath -> IO ()
scanFullUTXOCommand configPath = do
  config <- parseConfig configPath
  failures <- scanFullUTXO config
  if null failures
    then putStrLn "‚úÖ Full UTXO scan completed successfully."
    else do
      putStrLn "‚ùå Full UTXO scan completed with errors:"
      forM_ failures $ \err -> putStrLn $ "  - " ++ show err

showWalletInfo :: Wallet -> IO ()
showWalletInfo (Wallet walletName _ pubKey (Addr.Address addr)) = do
  putStrLn $ "üßæ Wallet Name : " ++ getWalletName walletName
  putStrLn $ "üîê Public Key  : " ++ show pubKey
  putStrLn $ "üè¶ Address     : " ++ T.unpack addr
